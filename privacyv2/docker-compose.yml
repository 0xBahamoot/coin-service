version: "2.2"
services:
  chainsync:
    image: coinservice
    build:
      context: ./csv
      dockerfile: Dockerfile
    volumes:
      - ./data/chain:/home/chain
    working_dir: /home
    entrypoint: [./run.sh]
    environment:
      INDEXERID: -1
      MODE: "chainsync"
    env_file:
      - service.env
    depends_on:
      - mongo1
      # - mongo2
      # - mongo3

  query:
    image: coinservice
    working_dir: /home
    entrypoint: [./run.sh]
    environment:
      INDEXERID: 0
      MODE: "query"
    env_file:
      - service.env
    depends_on:
      - chainsync
      - mongo1
      # - mongo2
      # - mongo3

  indexer:
    image: coinservice
    working_dir: /home
    entrypoint: [./run.sh]
    environment:
      INDEXERID: 0
      MODE: "indexer"
    env_file:
      - service.env
    depends_on:
      - chainsync
      - mongo1
      # - mongo2
      # - mongo3

  worker:
    image: coinservice
    scale: 5
    working_dir: /home
    entrypoint: [./run.sh]
    environment:
      INDEXERID: 0
      MODE: "indexworker"
    env_file:
      - service.env
    depends_on:
      - indexer

  nginx-server:
    image: nginx-load-balancer
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 8090:80
    restart: unless-stopped
    depends_on:
      - query
      - indexer

  # watcher:
  #   image: alpine
  #   volumes:
  #     - .:/home
  #   entrypoint: [/home/servicewatcher]
  #   environment:
  #     SLACKHOOKCSV: ""
  #     CSVSYNCKER: "http://chainsyncv3:9001"
  #     FULLNODE: "http://51.161.119.66:9334"
  #   depends_on:
  #     - chainsyncv3

  mongo1:
    hostname: mongo1
    container_name: localmongo1
    image: mongo
    restart: always
    volumes:
      - ./data/mongodb:/data/db
      - ./data/mongodb_config:/data/configdb
    entrypoint:
      [
        "/usr/bin/mongod",
        "--bind_ip_all",
        "--replSet",
        "rs0",
        "--journal",
        "--dbpath",
        "/data/db",
        "--enableMajorityReadConcern",
        "false",
      ]
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
  # mongo2:
  #   hostname: mongo2
  #   container_name: localmongo2
  #   image: mongo
  #   restart: always
  #   volumes:
  #     - ./data/mongo2:/data/db
  #     - ./data/mongo2_config:/data/configdb
  #   entrypoint:
  #     [
  #       "/usr/bin/mongod",
  #       "--bind_ip_all",
  #       "--replSet",
  #       "rs0",
  #       "--journal",
  #       "--dbpath",
  #       "/data/db",
  #       "--enableMajorityReadConcern",
  #       "false",
  #     ]
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example
  # mongo3:
  #   hostname: mongo3
  #   container_name: localmongo3
  #   image: mongo
  #   restart: always
  #   volumes:
  #     - ./data/mongo3:/data/db
  #     - ./data/mongo3_config:/data/configdb
  #   entrypoint:
  #     [
  #       "/usr/bin/mongod",
  #       "--bind_ip_all",
  #       "--replSet",
  #       "rs0",
  #       "--journal",
  #       "--dbpath",
  #       "/data/db",
  #       "--enableMajorityReadConcern",
  #       "false",
  #     ]
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: example
  mongo-setup:
    container_name: mongo-setup
    image: mongo
    restart: on-failure
    networks:
      default:
    volumes:
      - ./scripts:/scripts
    entrypoint: ["/scripts/setup.sh"] # Make sure this file exists (see below for the setup.sh)
    depends_on:
      - mongo1
      # - mongo2
      # - mongo3
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8029:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_SERVER: mongo1
# volumes:
#   mongodb:
#   mongodb_config:
